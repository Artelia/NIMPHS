@manual{blender,
    title = {Blender - a 3D modelling and rendering package},
    author = {{Blender Online Community}},
    organization = {Blender Foundation},
    address = {Stichting Blender Foundation, Amsterdam},
    year = {2022},
    url = {http://www.blender.org},
}

@article{pyvista,
    doi = {10.21105/joss.01450},
    url = {https://doi.org/10.21105/joss.01450},
    year = {2019},
    publisher = {The Open Journal},
    volume = {4},
    number = {37},
    pages = {1450},
    author = {C. Bane Sullivan and Alexander A. Kaszynski},
    title = {PyVista: 3D plotting and mesh analysis through a streamlined interface for the Visualization Toolkit (VTK)},
    journal = {Journal of Open Source Software}
}

@book{vtk,
  title={The Visualization Toolkit: An Object-oriented Approach to 3D Graphics},
  author={Schroeder, W. and Martin, K. and Lorensen, B. and Kitware, Inc},
  isbn={9781930934191},
  url={https://books.google.fr/books?id=rx4vPwAACAAJ},
  year={2006},
  publisher={Kitware}
}

@misc{stop-motion-obj,
  author = {Justin Jensen},
  title = {Stop-Motion-OBJ},
  year = {2022},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/neverhood311/Stop-motion-OBJ}},
  commit = {4fd8bff2570f6f1c76646ffa35f6912f6cb111b3}
}

@article{numpy,
    author={Harris, Charles R. and Millman, K. Jarrod and van der Walt, St{\'e}fan J. and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and van Kerkwijk, Marten H. and Brett, Matthew and Haldane, Allan and del R{\'i}o, Jaime Fern{\'a}ndez and Wiebe, Mark and Peterson, Pearu and G{\'e}rard-Marchant, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
    title={Array programming with NumPy},
    journal={Nature},
    year={2020},
    month={Sep},
    day={01},
    volume={585},
    number={7825},
    pages={357-362},
    abstract={Array programming provides a powerful, compact and expressive syntax for accessing, manipulating and operating on data in vectors, matrices and higher-dimensional arrays. NumPy is the primary array programming library for the Python language. It has an essential role in research analysis pipelines in fields as diverse as physics, chemistry, astronomy, geoscience, biology, psychology, materials science, engineering, finance and economics. For example, in astronomy, NumPy was an important part of the software stack used in the discovery of gravitational waves1 and in the first imaging of a black hole2. Here we review how a few fundamental array concepts lead to a simple and powerful programming paradigm for organizing, exploring and analysing scientific data. NumPy is the foundation upon which the scientific Python ecosystem is constructed. It is so pervasive that several projects, targeting audiences with specialized needs, have developed their own NumPy-like interfaces and array objects. Owing to its central position in the ecosystem, NumPy increasingly acts as an interoperability layer between such array computation libraries and, together with its application programming interface (API), provides a flexible framework to support the next decade of scientific and industrial analysis.},
    issn={1476-4687},
    doi={10.1038/s41586-020-2649-2},
    url={https://doi.org/10.1038/s41586-020-2649-2}
}

@book{telemac-mascaret,
    title={Hydrodynamics of Free Surface Flows: Modelling with the Finite Element Method},
    author={Hervouet, J.M.},
    isbn={9780470319635},
    url={https://books.google.fr/books?id=OLLb5-HSO7EC},
    year={2007},
    publisher={Wiley}
}

@article{openfoam,
    author = {Jasak, Hrvoje},
    year = {2009},
    month = {12},
    pages = {89-94},
    title = {OpenFOAM: open source CFD in research and industry},
    volume = {1},
    journal = {International Journal of Naval Architecture and Ocean Engineering},
    doi = {10.3744/JNAOE.2009.1.2.089}
}

@article{fudaa,
    author = {Lacombe, Jean-Marc and Pasteur, Olivier},
    year = {2008},
    month = {11},
    pages = {593-596},
    title = {FUDAA: An Open-Source Framework for the Integration of Simulation Codes, Pre-Processing, and Post-Processing Tools},
    volume = {0},
    isbn = {978-0-7695-3493-0},
    journal = {Signal-Image Technologies and Internet-Based System, International IEEE Conference on},
    doi = {10.1109/SITIS.2008.39}
}

@inproceedings{paraview,
    title={ParaView: An End-User Tool for Large-Data Visualization},
    author={James P. Ahrens and Berk Geveci and C. Charles Law},
    booktitle={The Visualization Handbook},
    year={2005}
}

@manual{qgis,
    title = {QGIS Geographic Information System},
    author = {{QGIS Development Team}},
    organization = {QGIS Association},
    year = {2022},
    url = {https://www.qgis.org},
}

@inproceedings{numba,
    author = {Lam, Siu Kwan and Pitrou, Antoine and Seibert, Stanley},
    title = {Numba: A LLVM-Based Python JIT Compiler},
    year = {2015},
    isbn = {9781450340052},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2833157.2833162},
    doi = {10.1145/2833157.2833162},
    abstract = {Dynamic, interpreted languages, like Python, are attractive for domain-experts and scientists experimenting with new ideas. However, the performance of the interpreter is often a barrier when scaling to larger data sets. This paper presents a just-in-time compiler for Python that focuses in scientific and array-oriented computing. Starting with the simple syntax of Python, Numba compiles a subset of the language into efficient machine code that is comparable in performance to a traditional compiled language. In addition, we share our experience in building a JIT compiler using LLVM[1].},
    booktitle = {Proceedings of the Second Workshop on the LLVM Compiler Infrastructure in HPC},
    articleno = {7},
    numpages = {6},
    keywords = {LLVM, Python, compiler},
    location = {Austin, Texas},
    series = {LLVM '15}
}

@article{openvdb,
    author = {Museth, Ken},
    title = {VDB: High-Resolution Sparse Volumes with Dynamic Topology},
    year = {2013},
    issue_date = {June 2013},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {32},
    number = {3},
    issn = {0730-0301},
    url = {https://doi.org/10.1145/2487228.2487235},
    doi = {10.1145/2487228.2487235},
    abstract = {We have developed a novel hierarchical data structure for the efficient representation of sparse, time-varying volumetric data discretized on a 3D grid. Our “VDB”, so named because it is a Volumetric, Dynamic grid that shares several characteristics with B+trees, exploits spatial coherency of time-varying data to separately and compactly encode data values and grid topology. VDB models a virtually infinite 3D index space that allows for cache-coherent and fast data access into sparse volumes of high resolution. It imposes no topology restrictions on the sparsity of the volumetric data, and it supports fast (average O(1)) random access patterns when the data are inserted, retrieved, or deleted. This is in contrast to most existing sparse volumetric data structures, which assume either static or manifold topology and require specific data access patterns to compensate for slow random access. Since the VDB data structure is fundamentally hierarchical, it also facilitates adaptive grid sampling, and the inherent acceleration structure leads to fast algorithms that are well-suited for simulations. As such, VDB has proven useful for several applications that call for large, sparse, animated volumes, for example, level set dynamics and cloud modeling. In this article, we showcase some of these algorithms and compare VDB with existing, state-of-the-art data structures.},
    journal = {ACM Trans. Graph.},
    month = {jul},
    articleno = {27},
    numpages = {22},
    keywords = {Volumes, implicit surfaces, level sets, fluid animation}
}

@article{ospray,
    author = {Wald, I and Johnson, GP and Amstutz, J and Brownlee, C and Knoll, A and Jeffers, J and Gunther, J and Navratil, P},
    title = {OSPRay - A CPU Ray Tracing Framework for Scientific Visualization},
    year = {2017},
    issue_date = {January 2017},
    publisher = {IEEE Educational Activities Department},
    address = {USA},
    volume = {23},
    number = {1},
    issn = {1077-2626},
    url = {https://doi.org/10.1109/TVCG.2016.2599041},
    doi = {10.1109/TVCG.2016.2599041},
    abstract = {Scientific data is continually increasing in complexity, variety and size, making efficient visualization and specifically rendering an ongoing challenge. Traditional rasterization-based visualization approaches encounter performance and quality limitations, particularly in HPC environments without dedicated rendering hardware. In this paper, we present OSPRay, a turn-key CPU ray tracing framework oriented towards production-use scientific visualization which can utilize varying SIMD widths and multiple device backends found across diverse HPC resources. This framework provides a high-quality, efficient CPU-based solution for typical visualization workloads, which has already been integrated into several prevalent visualization packages. We show that this system delivers the performance, high-level API simplicity, and modular device support needed to provide a compelling new rendering framework for implementing efficient scientific visualization workflows.},
    journal = {IEEE Transactions on Visualization and Computer Graphics},
    month = {jan},
    pages = {931-940},
    numpages = {10}
}

@article{tecplot,
    title={Tecplot 8.0},
    author={MITCHELL, KATHY E},
    journal={Science},
    volume={290},
    number={5499},
    pages={2097--2097},
    year={2000},
    publisher={American Association for the Advancement of Science}
}